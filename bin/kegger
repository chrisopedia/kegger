#!/usr/bin/env bash

# Check if Homebrew is installed, if not bail
if ! type -P 'git' &> /dev/null; then
	printf '%s⊘ Error:%s Homebrew is required to use %s. Aborting!\n' "$(tput setaf 1)" "$(tput sgr0)" "$(basename "$0")"
	printf '\n'
	printf 'Download it at http://brew.sh\n'
	exit 2
fi

# Check if jq is installed, if not bail
if ! type -P 'jq' &> /dev/null; then
	printf '%s⊘ Error:%s jq is required to parse JSON. Aborting!\n' "$(tput setaf 1)" "$(tput sgr0)"
	printf '\n'
	printf 'Download it at http://stedolan.github.io/jq\n'
	exit 2
fi

# Tap/Setup homebrew cask for OS X installations
if [[ ! -d "$(brew --prefix)/Homebrew/Library/Taps/homebrew/homebrew-cask" ]]; then
	printf '%s⊘ Error:%s Homebrew Cask is required to use %s. Aborting!\n' "$(tput setaf 1)" "$(tput sgr0)" "$(basename "$0")"
	printf '\n'
	printf 'Download it at http://caskroom.io/\n'
	exit 2
fi

_kegger() {
	local usage="$(basename "$0"): usage: $(basename "$0") [-h|--help] [-v|--version] $(tput smul)Github Gist ID$(tput rmul)"
	local opt response gist_url gist_file
	local id="$1"
	local api_url="https://api.github.com/gists/${id}"

	# Test for known flags
	for opt in "$@"
	do
		case "$opt" in
			-h | --help) # Help text
				printf "%s\n" "${usage}"
				exit
				;;
			-t | --test) # test suite using roundup
				roundup="$(type -P 'roundup')"
				[[ ! -z $roundup ]] || {
					printf '%s⊘ Error:%s Roundup is required to run tests. Aborting!\n' "$(tput setaf 1)" "$(tput sgr0)"
					printf '\n'
					printf 'Download it at https://github.com/bmizerany/roundup\n'
					exit 2;
				}
				$roundup ./tests/*.sh
				exit 0
				;;
			-v | --version) # Version of software
				printf 'Version %s\n' "$(git describe --tags)"
				exit 0
				;;
			-*|--*)
				printf "%s: usage: %s: invalid option\n%s\n" "$(basename "$0")" "$opt"
				exit 1
				;;
		esac
	done

	# Check if URL is passed in, if not bail
	if [[ -z "${id}" ]]; then
		printf "bash: %s: A valid Github Gist ID is required\n" "$(basename "$0")"
		exit 1;
	fi

	# http://stackoverflow.com/questions/238073/how-to-add-a-progress-bar-to-a-shell-script
	# start progress bar
	while :;do echo -n .;sleep 1;done &

	# check response header from github user passed in
	# http://stackoverflow.com/a/10724976/1536779
	response="$(curl --write-out %{http_code} --silent --output /dev/null "${api_url}")"

	# kill the progress bar
	kill $!; trap 'kill $!' SIGTERM

	# if reponse is greater than or equal to 400 somethings wrong
	if [[ "${response}" -ge 400 ]]; then
		printf '%sbash: %s: %s: URL is not valid\n' "-" "$(basename "$0")" "$1"
		#debug statement
		#printf 'Github HTTP Response code: %s\n' "${response}"
		exit 3
	fi

	# get a json list of all repos and story as array
	gist_url=$(curl "${api_url}" | jq '.files[].raw_url')
	gist_url="${gist_url:1:${#gist_url}-2}"
	gist_file=$(curl "${api_url}" | jq '.files[].filename')
	gist_file="${gist_file:1:${#gist_file}-2}"


	curl -#fLOJ "${gist_url}"
	mv "${gist_file}" "/tmp/${gist_file}"

	# update and upgrade all packages
	brew update
	brew upgrade

	# store IFS within a temp variable
	OIFS=$IFS

	# set the separator to a carriage return & a new line break
	IFS=$'\r\n' 
	# read in passed-in file and store as an array
	brews=($(cat "/tmp/${gist_file}"))

	for index in ${!brews[*]}
	do
		if ! brew list '${brews[$index]}' &> /dev/null; then
			# Store the name (and options) of every missing formula
			brew cask install ${brews[$index]}
		fi
	done

	# reset IFS back
	IFS=$OIFS

	brew cask alfred link
	brew cleanup

	rm -rf "/tmp/${gist_file}"
}

_kegger "$@"
